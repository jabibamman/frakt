var searchIndex = JSON.parse('{\
"client":{"doc":"","t":"AAFFFF","n":["image","julia","main","open_image","generate_julia_set","iterations_to_color"],"q":[[0,"client"],[3,"client::image"],[4,"client::julia"]],"d":["","","","Opens an image file with the default image viewer of the …","Generates an image of the Julia set fractal based on the …",""],"i":[0,0,0,0,0,0],"f":[0,0,[[]],[1],[2,[[6,[[4,[3]],[5,[3]]]]]],[[7,7],3]],"c":[],"p":[[15,"str"],[3,"FragmentTask"],[15,"u8"],[3,"Rgb"],[3,"Vec"],[3,"ImageBuffer"],[15,"u16"]]},\
"complex":{"doc":"","t":"AAIKKKKKKKIKKKKK","n":["complex_operations","julia_descriptor_impl","ComplexOperations","add","magnitude_squared","mul","new","norm","square","sub","JuliaOperations","c","divergence_threshold_square","iterate_complex_point","new","to_complex"],"q":[[0,"complex"],[2,"complex::complex_operations"],[10,"complex::julia_descriptor_impl"]],"d":["","","Provides a set of operations for complex number arithmetic.","Adds two complex numbers and returns the result.","Returns the squared magnitude of the complex number.","Multiplies two complex numbers and returns the result.","Constructs a new complex number.","Returns the Euclidean norm (magnitude) of the complex …","Squares the complex number and returns the result.","Subtracts another complex number from this one and returns …","Provides operations specific to the Julia fractal.","Returns a reference to the complex number <code>c</code> used in the …","Returns the square of the divergence threshold.","Iterates over a complex point and returns the number of …","Constructs a new <code>JuliaDescriptor</code> with the specified …","Converts pixel coordinates to a complex number based on …"],"i":[0,0,0,5,5,5,5,5,5,5,0,6,6,6,6,6],"f":[0,0,0,[[]],[[],1],[[]],[[1,1]],[[],1],[[]],[[]],0,[[],2],[[],1],[[2,3],3],[[2,1]],[[3,3,4],2]],"c":[],"p":[[15,"f64"],[3,"Complex"],[15,"u16"],[3,"Resolution"],[8,"ComplexOperations"],[8,"JuliaOperations"]]},\
"server":{"doc":"","t":"F","n":["main"],"q":[[0,"server"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"shared":{"doc":"","t":"AAAAAAAAAAAADLLLLLLLMLMLLLLLNENNEENNNNLLLLLLLLLLLLLLLLLLLLLLLLDENDDLLLLLLLLMLLLLLLLLMMLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLMLLLMLLLMMMLLLLLLLLLLLLLLLDLLLLMLLLLMLLLLLDLLLLMLLLLLLLLLMDLLLLLLLLLLLLLMMDLLLLLLLLMMLLLLLDLLLLLLLLMMLLLLLDLLLLMLLLLMLLLLLAFFFFF","n":["types","utils","complex","filesystem","fractal_descriptor","messages","pixel_data","pixel_intensity","point","range","resolution","u8data","Complex","borrow","borrow_mut","clone","clone_into","eq","fmt","from","im","into","re","to_owned","try_from","try_into","type_id","vzip","Current","DirType","Directory","File","FileExtension","FileType","JPEG","JPG","PNG","Workspace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","FractalDescriptor","FractalType","Julia","JuliaDescriptor","MandelbrotDescriptor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","divergence_threshold_square","divergence_threshold_square","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fractal_type","from","from","from","from","into","into","into","into","max_iteration","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","FragmentRequest","FragmentResult","FragmentTask","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fractal","from","from","from","id","into","into","into","max_iteration","range","resolution","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","PixelData","borrow","borrow_mut","clone","clone_into","count","eq","fmt","from","into","offset","to_owned","try_from","try_into","type_id","vzip","PixelIntensity","borrow","borrow_mut","clone","clone_into","count","eq","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","zn","Point","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","x","y","Range","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","max","min","to_owned","try_from","try_into","type_id","vzip","Resolution","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","nx","ny","to_owned","try_from","try_into","type_id","vzip","U8Data","borrow","borrow_mut","clone","clone_into","count","eq","fmt","from","into","offset","to_owned","try_from","try_into","type_id","vzip","filesystem","dir_exists","get_dir_path_buf","get_extension_str","get_file_path","get_workspace_dir"],"q":[[0,"shared"],[2,"shared::types"],[12,"shared::types::complex"],[28,"shared::types::filesystem"],[62,"shared::types::fractal_descriptor"],[124,"shared::types::messages"],[171,"shared::types::pixel_data"],[187,"shared::types::pixel_intensity"],[203,"shared::types::point"],[219,"shared::types::range"],[235,"shared::types::resolution"],[251,"shared::types::u8data"],[267,"shared::utils"],[268,"shared::utils::filesystem"]],"d":["","","","","","","","","","","","","A <code>Complex</code> number with real (<code>re</code>) and imaginary (<code>im</code>) parts.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Represents the types of directories used in the …","","","Enumerates the supported image file extensions.","Specifies the types of files or entities in a file system.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","General descriptor for a fractal, encompassing different …","Represents the type of fractal to be generated.","","Describes parameters specific to a Julia fractal.","Describes parameters specific to a Mandelbrot fractal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Represents a request for a fragment of work from a worker.","Represents the result of a fragment computation by a …","Describes a task assigned to a worker for fractal …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Represents data associated with a set of pixels in an …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Represents the intensity of a pixel in fractal rendering, …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Represents a point in a two-dimensional space.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Defines a rectangular range in a two-dimensional space, …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Represents the resolution of an image or a grid, defined …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Represents a segment of data, typically used for handling …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Checks if a given path string represents an existing …","Retrieves the directory path as a <code>PathBuf</code>. In release …","Maps a <code>FileExtension</code> enum variant to its corresponding …","Generates a file path string with a random component in …","Obtains the workspace directory. Typically the current …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,25,0,26,26,0,0,22,22,22,25,25,26,22,25,26,22,25,26,22,25,26,22,25,26,22,25,26,22,25,26,22,25,26,22,0,0,7,0,0,7,8,9,10,7,8,9,10,8,7,8,9,10,7,8,9,10,8,9,7,8,9,10,7,8,9,10,10,7,8,9,10,7,8,9,10,9,7,8,9,10,7,8,9,10,7,8,9,10,7,8,9,10,7,8,9,10,0,0,0,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,12,11,12,13,12,11,12,13,12,12,12,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[1,3],4],[[]],0,[[]],0,[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[7,7],[8,8],[9,9],[10,10],[[]],[[]],[[]],[[]],0,0,[[7,7],2],[[8,8],2],[[9,9],2],[[10,10],2],[[7,3],4],[[8,3],4],[[9,3],4],[[10,3],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[11,11],[12,12],[13,13],[[]],[[]],[[]],[[11,11],2],[[12,12],2],[[13,13],2],[[11,3],4],[[12,3],4],[[13,3],4],0,[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[]],[[]],[[]],0,[[]],[[]],[14,14],[[]],0,[[14,14],2],[[14,3],4],[[]],[[]],0,[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[15,15],[[]],0,[[15,15],2],[[15,3],4],[[]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[]],[[]],[16,16],[[]],[[16,16],2],[[16,3],4],[[]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,[[]],[[]],[17,17],[[]],[[17,17],2],[[17,3],4],[[]],[[]],0,0,[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[18,18],[[]],[[18,18],2],[[18,3],4],[[]],[[]],0,0,[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[19,19],[[]],0,[[19,19],2],[[19,3],4],[[]],[[]],0,[[]],[[],5],[[],5],[[],6],[[]],0,[20,2],[[],21],[22,20],[[20,21,20],23],[[],[[24,[21]]]]],"c":[],"p":[[3,"Complex"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[4,"FractalType"],[3,"JuliaDescriptor"],[3,"MandelbrotDescriptor"],[3,"FractalDescriptor"],[3,"FragmentRequest"],[3,"FragmentTask"],[3,"FragmentResult"],[3,"PixelData"],[3,"PixelIntensity"],[3,"Point"],[3,"Range"],[3,"Resolution"],[3,"U8Data"],[15,"str"],[3,"PathBuf"],[4,"FileExtension"],[3,"String"],[6,"Result"],[4,"DirType"],[4,"FileType"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
