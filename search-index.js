var searchIndex = JSON.parse('{\
"cli":{"doc":"","t":"AAFEDDNIYNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLMMLLLLLLLLLLLLLLLLLLLLM","n":["operation","parser","parse_to_address","CliArgs","CliClientArgs","CliServerArgs","Client","Parser","Parser","Server","augment_args","augment_args","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","command","command","command_for_update","command_for_update","fmt","fmt","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","hostname","hostname","into","into","into","parse","parse_from","port","port","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_parse","try_parse_from","try_update_from","type_id","type_id","type_id","update_from","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","worker_name"],"q":[[0,"cli"],[2,"cli::operation"],[3,"cli::parser"],[71,"alloc::string"],[72,"clap_builder::builder::command"],[73,"core::fmt"],[74,"core::fmt"],[75,"clap_builder"],[76,"core::result"],[77,"clap_builder::util::id"],[78,"core::option"],[79,"core::iter::traits::collect"],[80,"clap_builder::error::format"],[81,"clap_builder::error"],[82,"core::any"]],"d":["","","Parses <code>CliArgs</code> to create a formatted address string.","An enumeration representing the possible types of command …","Represents command line arguments for a client in a CLI …","Represents command line arguments for a server in a CLI …","","Parse command-line arguments into <code>Self</code>.","Generates the <code>Parser</code> implementation.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","The hostname of the client. Default: “localhost”","The hostname of the server. Default: “localhost”","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parse from <code>std::env::args_os()</code>, exit on error","Parse from iterator, exit on error","The port number to connect on. Default: 8787","The port number the server listens on. Default: 8787","","","","","","","","","","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from iterator, return Err on error.","Update from iterator, return Err on error.","","","","Update from iterator, exit on error","","","","","The name of the worker. Default: “worker”"],"i":[0,0,0,0,0,0,1,0,0,1,4,5,4,5,4,5,1,4,5,1,4,5,1,4,5,1,4,5,4,5,4,5,4,5,1,4,5,4,5,4,5,4,5,4,5,1,18,18,4,5,4,5,1,4,5,1,4,5,1,18,18,18,4,5,1,18,4,5,4,5,4],"f":[0,0,[1,2],0,0,0,0,0,0,0,[3,3],[3,3],[3,3],[3,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[5,5],[1,1],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],3],[[],3],[[],3],[[],3],[[4,7],8],[[5,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,[[11,[4,10]]]],[9,[[11,[5,10]]]],[9,[[11,[4,10]]]],[9,[[11,[5,10]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],-1,[]],[-1,-2,14,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[],[[11,[-1,[16,[15]]]]],[]],[-1,[[11,[-2,[16,[15]]]]],14,[]],[[-1,-2],[[11,[6,[16,[15]]]]],[],14],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[-1,-2],6,[],14],[[4,9],[[11,[6,10]]]],[[5,9],[[11,[6,10]]]],[[4,9],[[11,[6,10]]]],[[5,9],[[11,[6,10]]]],0],"c":[],"p":[[4,"CliArgs",3],[3,"String",71],[3,"Command",72],[3,"CliClientArgs",3],[3,"CliServerArgs",3],[15,"tuple"],[3,"Formatter",73],[6,"Result",73],[3,"ArgMatches",74],[6,"Error",75],[4,"Result",76],[3,"Id",77],[4,"Option",78],[8,"IntoIterator",79],[3,"RichFormatter",80],[3,"Error",81],[3,"TypeId",82],[8,"Parser",3]]},\
"client":{"doc":"","t":"AAFFFF","n":["fractal_generation","image","main","color","generate_fractal_set","open_image"],"q":[[0,"client"],[3,"client::fractal_generation"],[5,"client::image"],[6,"std::io::error"],[7,"shared::types::messages"],[8,"image::color"],[9,"alloc::vec"],[10,"image::buffer_"],[11,"std::io::error"]],"d":["","","","Gets a number between 0 and 1 and return the color that …","Generates an image of a Fractal Type based on the provided …","Opens an image file with the default image viewer of the …"],"i":[0,0,0,0,0,0],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[6,[[9,[[7,[4]],[8,[4]]]]]],[10,[[12,[1,11]]]]],"c":[],"p":[[15,"tuple"],[6,"Result",6],[15,"f32"],[15,"u8"],[15,"array"],[3,"FragmentTask",7],[3,"Rgb",8],[3,"Vec",9],[3,"ImageBuffer",10],[15,"str"],[3,"Error",6],[4,"Result",11]]},\
"complex":{"doc":"","t":"AAAAAAIKKKKKKKKKKKIKIKKKIKKKIKIK","n":["complex_operations","fractal_operations","iterated_sinz_impl","julia_descriptor_impl","mandelbrot_descriptor_impl","newtonraphsonz_descriptor_impl","ComplexOperations","abs","add","div","exp","magnitude_squared","mul","new","norm","sin","square","sub","FractalOperations","iterate_complex_point","IteratedSinZOperations","c","max_iteration","new","JuliaOperations","c","divergence_threshold_square","new","MandelbrotOperations","new","NewtonRaphsonOperations","new"],"q":[[0,"complex"],[6,"complex::complex_operations"],[18,"complex::fractal_operations"],[20,"complex::iterated_sinz_impl"],[24,"complex::julia_descriptor_impl"],[28,"complex::mandelbrot_descriptor_impl"],[30,"complex::newtonraphsonz_descriptor_impl"],[32,"shared::types::complex"]],"d":["","","","","","","Provides a set of operations for complex number arithmetic.","","Adds two complex numbers and returns the result.","","","Returns the squared magnitude of the complex number.","Multiplies two complex numbers and returns the result.","Constructs a new complex number.","Returns the Euclidean norm (magnitude) of the complex …","","Squares the complex number and returns the result.","Subtracts another complex number from this one and returns …","","Iterates over a complex point and returns the number of …","Provides operations specific to the Iterated Sin(z) …","Returns a reference to the complex number <code>c</code> used in the …","Fixed to 50","Constructs a new <code>IteratedSinZDescriptor</code> with the specified …","Provides operations specific to the Julia fractal.","Returns a reference to the complex number <code>c</code> used in the …","Returns the square of the divergence threshold.","Constructs a new <code>JuliaDescriptor</code> with the specified …","Trait définissant les opérations de fractale de …","Crée une nouvelle instance du type de fractale de …","","Crée une nouvelle instance du type de fractale."],"i":[0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,0,5,0,6,6,6,0,7,7,7,0,8,0,9],"f":[0,0,0,0,0,0,0,[-1,1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,1,[]],[[-1,-1],-1,[]],[[1,1],-1,[]],[-1,1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],0,[[-1,2,3],3,[]],0,[-1,2,[]],[-1,3,[]],[2,-1,[]],0,[-1,2,[]],[-1,1,[]],[[2,1],-1,[]],0,[[],-1,[]],0,[[],-1,[]]],"c":[],"p":[[15,"f64"],[3,"Complex",32],[15,"u16"],[8,"ComplexOperations",6],[8,"FractalOperations",18],[8,"IteratedSinZOperations",20],[8,"JuliaOperations",24],[8,"MandelbrotOperations",28],[8,"NewtonRaphsonOperations",30]]},\
"server":{"doc":"","t":"AAAFAAAAFFFFF","n":["handler","image","services","handle_client","connect","reader","server_runner","write","connect","get_response","read_message","run_server","write"],"q":[[0,"server"],[3,"server::handler"],[4,"server::services"],[8,"server::services::connect"],[9,"server::services::reader"],[11,"server::services::server_runner"],[12,"server::services::write"],[13,"std::net::tcp"],[14,"std::io::error"],[15,"alloc::string"]],"d":["","","","Handles a client TCP stream.","","","","","Connect to a server","","Reads a message from a TCP stream, parsing and returning …","Starts a TCP server on the specified address.","Write a string to a stream"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[1,2],0,0,0,0,[3,[[4,[1]]]],[1,[[4,[5]]]],[1,[[4,[5]]]],[3,[[4,[2]]]],[[1,3],[[4,[2]]]]],"c":[],"p":[[3,"TcpStream",13],[15,"tuple"],[15,"str"],[6,"Result",14],[3,"String",15]]},\
"shared":{"doc":"","t":"AAAAAAAAAAAADLLLLLLLMLMLLLLLNENNEENNNNLLLLLLLLLLLLLLLLLLLLLLLLDENDNDNDNDNDLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLMLLLMLLLMMLMMLLLLLLLLLLLLLLLLLMDLLLLMLLLLMLLLLLDLLLLMLLLLLLLLLMDLLLLLLLLLLLLLMMDLLLLLLLLMMLLLLLDLLLLLLLLMMLLLLLDLLLLMLLLLMLLLLLAAAFFFFFIKKKF","n":["types","utils","complex","filesystem","fractal_descriptor","messages","pixel_data","pixel_intensity","point","range","resolution","u8data","Complex","borrow","borrow_mut","clone","clone_into","eq","fmt","from","im","into","re","to_owned","try_from","try_into","type_id","vzip","Current","DirType","Directory","File","FileExtension","FileType","JPEG","JPG","PNG","Workspace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","FractalDescriptor","FractalType","IteratedSinZ","IteratedSinZDescriptor","Julia","JuliaDescriptor","Mandelbrot","MandelbrotDescriptor","NewtonRaphsonZ3","NewtonRaphsonZ3Descriptor","NewtonRaphsonZ4","NewtonRaphsonZ4Descriptor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","c","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","divergence_threshold_square","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fractal_type","from","from","from","from","from","from","from","into","into","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","FragmentRequest","FragmentResult","FragmentTask","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","fractal","from","from","from","id","into","into","into","max_iteration","maximal_work_load","new","range","resolution","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","worker_name","PixelData","borrow","borrow_mut","clone","clone_into","count","eq","fmt","from","into","offset","to_owned","try_from","try_into","type_id","vzip","PixelIntensity","borrow","borrow_mut","clone","clone_into","count","eq","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","zn","Point","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","x","y","Range","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","max","min","to_owned","try_from","try_into","type_id","vzip","Resolution","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","nx","ny","to_owned","try_from","try_into","type_id","vzip","U8Data","borrow","borrow_mut","clone","clone_into","count","eq","fmt","from","into","offset","to_owned","try_from","try_into","type_id","vzip","filesystem","fragment_request_impl","type_of","dir_exists","get_dir_path_buf","get_extension_str","get_file_path","get_workspace_dir","FragmentRequestOperation","deserialize","new","serialize","type_of"],"q":[[0,"shared"],[2,"shared::types"],[12,"shared::types::complex"],[28,"shared::types::filesystem"],[62,"shared::types::fractal_descriptor"],[169,"shared::types::messages"],[223,"shared::types::pixel_data"],[239,"shared::types::pixel_intensity"],[255,"shared::types::point"],[271,"shared::types::range"],[287,"shared::types::resolution"],[303,"shared::types::u8data"],[319,"shared::utils"],[322,"shared::utils::filesystem"],[327,"shared::utils::fragment_request_impl"],[331,"shared::utils::type_of"],[332,"core::fmt"],[333,"core::fmt"],[334,"core::any"],[335,"serde_json::error"],[336,"serde::de"],[337,"alloc::string"],[338,"serde::ser"],[339,"std::path"],[340,"std::io::error"],[341,"std::io::error"]],"d":["","","","","","","","","","","","","A <code>Complex</code> number with real (<code>re</code>) and imaginary (<code>im</code>) parts.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Represents the types of directories used in the …","","","Enumerates the supported image file extensions.","Specifies the types of files or entities in a file system.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","General descriptor for a fractal, encompassing different …","Represents the type of fractal to be generated.","","Describes parameters specific to a Mandelbrot fractal.","","Describes parameters specific to a Julia fractal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a request for a fragment of work from a worker.","Represents the result of a fragment computation by a …","Describes a task assigned to a worker for fractal …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Represents data associated with a set of pixels in an …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Represents the intensity of a pixel in fractal rendering, …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Represents a point in a two-dimensional space.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Defines a rectangular range in a two-dimensional space, …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Represents the resolution of an image or a grid, defined …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Represents a segment of data, typically used for handling …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Checks if a given path string represents an existing …","Returns a <code>PathBuf</code> representing a directory path.","Maps a <code>FileExtension</code> enum variant to its corresponding …","Generates a file path string with a random component in …","Obtains the workspace directory. Typically the current …","","","","Serializes a <code>FragmentRequest</code> into a JSON string.",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,35,0,36,36,0,0,32,32,32,35,35,36,32,35,36,32,35,36,32,35,36,32,35,36,32,35,36,32,35,36,32,35,36,32,0,0,8,0,8,0,8,0,8,0,8,0,8,9,10,11,12,13,14,8,9,10,11,12,13,14,9,10,8,9,10,11,12,13,14,8,9,10,11,12,13,14,9,8,9,10,11,12,13,14,8,9,10,11,12,13,14,12,8,9,10,11,12,13,14,8,9,10,11,12,13,14,8,9,10,11,12,13,14,8,9,10,11,12,13,14,8,9,10,11,12,13,14,8,9,10,11,12,13,14,8,9,10,11,12,13,14,0,0,0,15,16,17,15,16,17,15,16,17,15,16,17,15,15,15,16,17,15,16,17,16,15,16,17,16,15,16,17,16,15,15,16,16,15,15,15,16,17,15,16,17,15,16,17,15,16,17,15,16,17,15,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,0,0,0,0,0,37,37,37,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[[1,4],5],[-1,-1,[]],0,[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[8,8],3],[[9,9],3],[[10,10],3],[[11,11],3],[[12,12],3],[[13,13],3],[[14,14],3],[[8,4],5],[[9,4],5],[[10,4],5],[[11,4],5],[[12,4],5],[[13,4],5],[[14,4],5],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[16,16],[17,17],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[18,[[6,[15,19]]]],[-1,[[6,[15]]],20],[[15,15],3],[[16,16],3],[[17,17],3],[[15,4],5],[[16,4],5],[[17,4],5],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[21,22],15],0,0,[[15,-1],6,23],[15,[[6,[21,19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[[-1,-2],2,[],[]],0,[[24,24],3],[[24,4],5],[-1,-1,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[[-1,-2],2,[],[]],0,[[25,25],3],[[25,4],5],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[[-1,-2],2,[],[]],[[26,26],3],[[26,4],5],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[[-1,-2],2,[],[]],[[27,27],3],[[27,4],5],[-1,-1,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[[-1,-2],2,[],[]],[[28,28],3],[[28,4],5],[-1,-1,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[[-1,-2],2,[],[]],0,[[29,29],3],[[29,4],5],[-1,-1,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,-2,[],[]],0,0,0,[18,3],[[],[[6,[30,31]]]],[32,18],[[18,30,18],[[6,[21,21]]]],[[],[[33,[30]]]],0,[18,[[6,[-1,19]]],34],[[21,22],-1,[]],[-1,[[6,[21,19]]],[]],[-1,18,[]]],"c":[],"p":[[3,"Complex",12],[15,"tuple"],[15,"bool"],[3,"Formatter",332],[6,"Result",332],[4,"Result",333],[3,"TypeId",334],[4,"FractalType",62],[3,"JuliaDescriptor",62],[3,"IteratedSinZDescriptor",62],[3,"MandelbrotDescriptor",62],[3,"FractalDescriptor",62],[3,"NewtonRaphsonZ3Descriptor",62],[3,"NewtonRaphsonZ4Descriptor",62],[3,"FragmentRequest",169],[3,"FragmentTask",169],[3,"FragmentResult",169],[15,"str"],[3,"Error",335],[8,"Deserializer",336],[3,"String",337],[15,"u32"],[8,"Serializer",338],[3,"PixelData",223],[3,"PixelIntensity",239],[3,"Point",255],[3,"Range",271],[3,"Resolution",287],[3,"U8Data",303],[3,"PathBuf",339],[3,"Error",340],[4,"FileExtension",28],[6,"Result",340],[8,"Sized",341],[4,"DirType",28],[4,"FileType",28],[8,"FragmentRequestOperation",327]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
