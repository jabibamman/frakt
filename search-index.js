var searchIndex = JSON.parse('{\
"cli":{"doc":"","t":"ADIYLLLLLLLLLLLMLLLMLLLLLLLLLM","n":["parser","CliArgs","Parser","Parser","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","hostname","into","parse","parse_from","port","try_from","try_into","try_parse","try_parse_from","try_update_from","type_id","update_from","update_from_arg_matches","update_from_arg_matches_mut","worker_name"],"q":[[0,"cli"],[1,"cli::parser"]],"d":["","Command line arguments for the CLI","Parse command-line arguments into <code>Self</code>.","Generates the <code>Parser</code> implementation.","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Parse from <code>std::env::args_os()</code>, exit on error","Parse from iterator, exit on error","","","","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from iterator, return Err on error.","Update from iterator, return Err on error.","","Update from iterator, exit on error","","",""],"i":[0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,2,2,2,14,14,14,2,14,2,2,2],"f":[0,0,0,0,[1,1],[1,1],[[]],[[]],[[],1],[[],1],[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],0,[[]],[[]],[10],0,[[],7],[[],7],[[],[[7,[[12,[11]]]]]],[10,[[7,[[12,[11]]]]]],[10,[[7,[[12,[11]]]]]],[[],13],[10],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]],0],"c":[],"p":[[3,"Command"],[3,"CliArgs"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[8,"IntoIterator"],[3,"RichFormatter"],[3,"Error"],[3,"TypeId"],[8,"Parser"]]},\
"client":{"doc":"","t":"AAFFFF","n":["fractal_generation","image","main","color","generate_fractal_set","open_image"],"q":[[0,"client"],[3,"client::fractal_generation"],[5,"client::image"]],"d":["","","","Gets a number between 0 and 1 and return the color that …","Generates an image of a Fractal Type based on the provided …","Opens an image file with the default image viewer of the …"],"i":[0,0,0,0,0,0],"f":[0,0,[[],1],[2,[[4,[3]]]],[5,[[8,[[6,[3]],[7,[3]]]]]],[9,[[11,[10]]]]],"c":[],"p":[[6,"Result"],[15,"f32"],[15,"u8"],[15,"array"],[3,"FragmentTask"],[3,"Rgb"],[3,"Vec"],[3,"ImageBuffer"],[15,"str"],[3,"Error"],[4,"Result"]]},\
"complex":{"doc":"","t":"AAAAIKKKKKKKKKIKKIKKIKK","n":["complex_operations","fractal_operations","iterated_sinz_impl","julia_descriptor_impl","ComplexOperations","add","exp","magnitude_squared","mul","new","norm","sin","square","sub","FractalOperations","c","iterate_complex_point","IteratedSinZOperations","max_iteration","new","JuliaOperations","divergence_threshold_square","new"],"q":[[0,"complex"],[4,"complex::complex_operations"],[14,"complex::fractal_operations"],[17,"complex::iterated_sinz_impl"],[20,"complex::julia_descriptor_impl"]],"d":["","","","","Provides a set of operations for complex number arithmetic.","Adds two complex numbers and returns the result.","","Returns the squared magnitude of the complex number.","Multiplies two complex numbers and returns the result.","Constructs a new complex number.","Returns the Euclidean norm (magnitude) of the complex …","","Squares the complex number and returns the result.","Subtracts another complex number from this one and returns …","","Returns a reference to the complex number <code>c</code> used in the …","Iterates over a complex point and returns the number of …","Provides operations specific to the Iterated Sin(z) …","","Constructs a new <code>IteratedSinZDescriptor</code> with the specified …","Provides operations specific to the Julia fractal.","Returns the square of the divergence threshold.","Constructs a new <code>JuliaDescriptor</code> with the specified …"],"i":[0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,5,5,0,6,6,0,7,7],"f":[0,0,0,0,0,[[]],[[]],[[],1],[[]],[[1,1]],[[],1],[[]],[[]],[[]],0,[[],2],[[2,3],3],0,[[],3],[2],0,[[],1],[[2,1]]],"c":[],"p":[[15,"f64"],[3,"Complex"],[15,"u16"],[8,"ComplexOperations"],[8,"FractalOperations"],[8,"IteratedSinZOperations"],[8,"JuliaOperations"]]},\
"server":{"doc":"","t":"AAAAAAFFF","n":["handler","image","services","connect","reader","write","connect","read_message","write"],"q":[[0,"server"],[3,"server::services"],[6,"server::services::connect"],[7,"server::services::reader"],[8,"server::services::write"]],"d":["","","","","","","Connect to a server","Read a message from a TCP stream.","Write a string to a stream"],"i":[0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,[1,[[3,[2]]]],[2,4],[[2,1],[[3,[2]]]]],"c":[],"p":[[15,"str"],[3,"TcpStream"],[6,"Result"],[3,"String"]]},\
"shared":{"doc":"","t":"AAAAAAAAAAAADLLLLLLLMLMLLLLLNENNEENNNNLLLLLLLLLLLLLLLLLLLLLLLLDENDNDDLLLLLLLLLLMMLLLLLLLLLLMMLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLMLLLMLLLMMMLLLLLLLLLLLLLLLDLLLLMLLLLMLLLLLDLLLLMLLLLLLLLLMDLLLLLLLLLLLLLMMDLLLLLLLLMMLLLLLDLLLLLLLLMMLLLLLDLLLLMLLLLMLLLLLAFFFFF","n":["types","utils","complex","filesystem","fractal_descriptor","messages","pixel_data","pixel_intensity","point","range","resolution","u8data","Complex","borrow","borrow_mut","clone","clone_into","eq","fmt","from","im","into","re","to_owned","try_from","try_into","type_id","vzip","Current","DirType","Directory","File","FileExtension","FileType","JPEG","JPG","PNG","Workspace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","FractalDescriptor","FractalType","IteratedSinZ","IteratedSinZDescriptor","Julia","JuliaDescriptor","MandelbrotDescriptor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","c","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","divergence_threshold_square","divergence_threshold_square","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fractal_type","from","from","from","from","from","into","into","into","into","into","max_iteration","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","FragmentRequest","FragmentResult","FragmentTask","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fractal","from","from","from","id","into","into","into","max_iteration","range","resolution","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","PixelData","borrow","borrow_mut","clone","clone_into","count","eq","fmt","from","into","offset","to_owned","try_from","try_into","type_id","vzip","PixelIntensity","borrow","borrow_mut","clone","clone_into","count","eq","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","zn","Point","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","x","y","Range","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","max","min","to_owned","try_from","try_into","type_id","vzip","Resolution","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","nx","ny","to_owned","try_from","try_into","type_id","vzip","U8Data","borrow","borrow_mut","clone","clone_into","count","eq","fmt","from","into","offset","to_owned","try_from","try_into","type_id","vzip","filesystem","dir_exists","get_dir_path_buf","get_extension_str","get_file_path","get_workspace_dir"],"q":[[0,"shared"],[2,"shared::types"],[12,"shared::types::complex"],[28,"shared::types::filesystem"],[62,"shared::types::fractal_descriptor"],[140,"shared::types::messages"],[187,"shared::types::pixel_data"],[203,"shared::types::pixel_intensity"],[219,"shared::types::point"],[235,"shared::types::range"],[251,"shared::types::resolution"],[267,"shared::types::u8data"],[283,"shared::utils"],[284,"shared::utils::filesystem"]],"d":["","","","","","","","","","","","","A <code>Complex</code> number with real (<code>re</code>) and imaginary (<code>im</code>) parts.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Represents the types of directories used in the …","","","Enumerates the supported image file extensions.","Specifies the types of files or entities in a file system.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","General descriptor for a fractal, encompassing different …","Represents the type of fractal to be generated.","","Describes parameters specific to a Mandelbrot fractal.","","Describes parameters specific to a Julia fractal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a request for a fragment of work from a worker.","Represents the result of a fragment computation by a …","Describes a task assigned to a worker for fractal …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Represents data associated with a set of pixels in an …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Represents the intensity of a pixel in fractal rendering, …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Represents a point in a two-dimensional space.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Defines a rectangular range in a two-dimensional space, …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Represents the resolution of an image or a grid, defined …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Represents a segment of data, typically used for handling …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Checks if a given path string represents an existing …","Returns a <code>PathBuf</code> representing a directory path.","Maps a <code>FileExtension</code> enum variant to its corresponding …","Generates a file path string with a random component in …","Obtains the workspace directory. Typically the current …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,27,0,28,28,0,0,24,24,24,27,27,28,24,27,28,24,27,28,24,27,28,24,27,28,24,27,28,24,27,28,24,27,28,24,0,0,7,0,7,0,0,7,8,9,10,11,7,8,9,10,11,8,9,7,8,9,10,11,7,8,9,10,11,8,10,7,8,9,10,11,7,8,9,10,11,11,7,8,9,10,11,7,8,9,10,11,10,7,8,9,10,11,7,8,9,10,11,7,8,9,10,11,7,8,9,10,11,7,8,9,10,11,0,0,0,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,13,12,13,14,13,12,13,14,13,13,13,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[1,3],4],[[]],0,[[]],0,[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[7,7],[8,8],[9,9],[10,10],[11,11],[[]],[[]],[[]],[[]],[[]],0,0,[[7,7],2],[[8,8],2],[[9,9],2],[[10,10],2],[[11,11],2],[[7,3],4],[[8,3],4],[[9,3],4],[[10,3],4],[[11,3],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[12,12],[13,13],[14,14],[[]],[[]],[[]],[[12,12],2],[[13,13],2],[[14,14],2],[[12,3],4],[[13,3],4],[[14,3],4],0,[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[]],[[]],[[]],0,[[]],[[]],[15,15],[[]],0,[[15,15],2],[[15,3],4],[[]],[[]],0,[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[16,16],[[]],0,[[16,16],2],[[16,3],4],[[]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[]],[[]],[17,17],[[]],[[17,17],2],[[17,3],4],[[]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,[[]],[[]],[18,18],[[]],[[18,18],2],[[18,3],4],[[]],[[]],0,0,[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[19,19],[[]],[[19,19],2],[[19,3],4],[[]],[[]],0,0,[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[20,20],[[]],0,[[20,20],2],[[20,3],4],[[]],[[]],0,[[]],[[],5],[[],5],[[],6],[[]],0,[21,2],[[],[[5,[22,23]]]],[24,21],[[21,22,21],[[5,[25,25]]]],[[],[[26,[22]]]]],"c":[],"p":[[3,"Complex"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[4,"FractalType"],[3,"JuliaDescriptor"],[3,"IteratedSinZDescriptor"],[3,"MandelbrotDescriptor"],[3,"FractalDescriptor"],[3,"FragmentRequest"],[3,"FragmentTask"],[3,"FragmentResult"],[3,"PixelData"],[3,"PixelIntensity"],[3,"Point"],[3,"Range"],[3,"Resolution"],[3,"U8Data"],[15,"str"],[3,"PathBuf"],[3,"Error"],[4,"FileExtension"],[3,"String"],[6,"Result"],[4,"DirType"],[4,"FileType"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
